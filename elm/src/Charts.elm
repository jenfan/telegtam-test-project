module Charts exposing (Chart, init)

--import Json.Decode as Decode exposing (Decoder, at, dict, int, string)
--import Json.Decode.Pipeline exposing (custom, init, required)

import Lines exposing (Line)


type alias Chart =
    { lines : List Line }


init : List Line
init =
    let
        line1 =
            Lines.init
                { points = List.map2 Tuple.pair x y0
                , id = 0
                , color = "red" --"#3DC23F"
                }

        line2 =
            Lines.init
                { points = List.map2 Tuple.pair x y1
                , id = 1
                , color = "blue" --"#F34C44"
                }
    in
    [ line1, line2 ]


y0 =
    [ 37, 20, 32, 39, 32, 35, 19, 65, 36, 62, 113, 69, 120, 60, 51, 49, 71, 122, 149, 69, 57, 21, 33, 55, 92, 62, 47, 50, 56, 116, 63, 60, 55, 65, 76, 33, 45, 64, 54, 81, 180, 123, 106, 37, 60, 70, 46, 68, 46, 51, 33, 57, 75, 70, 95, 70, 50, 68, 63, 66, 53, 38, 52, 109, 121, 53, 36, 71, 96, 55, 58, 29, 31, 55, 52, 44, 126, 191, 73, 87, 255, 278, 219, 170, 129, 125, 126, 84, 65, 53, 154, 57, 71, 64, 75, 72, 39, 47, 52, 73, 89, 156, 86, 105, 88, 45, 33, 56, 142, 124, 114, 64 ]


y1 =
    [ 22, 12, 30, 40, 33, 23, 18, 41, 45, 69, 57, 61, 70, 47, 31, 34, 40, 55, 27, 57, 48, 32, 40, 49, 54, 49, 34, 51, 51, 51, 66, 51, 94, 60, 64, 28, 44, 96, 49, 73, 30, 88, 63, 42, 56, 67, 52, 67, 35, 61, 40, 55, 63, 61, 105, 59, 51, 76, 63, 57, 47, 56, 51, 98, 103, 62, 54, 104, 48, 41, 41, 37, 30, 28, 26, 37, 65, 86, 70, 81, 54, 74, 70, 50, 74, 79, 85, 62, 36, 46, 68, 43, 66, 50, 28, 66, 39, 23, 63, 74, 83, 66, 40, 60, 29, 36, 27, 54, 89, 50, 73, 52 ]


x =
    [ 1542412.8, 1542499.2, 1542585.6, 1542672.0, 1542758.4, 1542844.8, 1542931.2, 1543017.6, 1543104.0, 1543190.4, 1543276.8, 1543363.2, 1543449.6, 1543536.0, 1543622.4, 1543708.8, 1543795.2, 1543881.6, 1543968.0, 1544054.4, 1544140.8, 1544227.2, 1544313.6, 1544400.0, 1544486.4, 1544572.8, 1544659.2, 1544745.6, 1544832.0, 1544918.4, 1545004.8, 1545091.2, 1545177.6, 1545264.0, 1545350.4, 1545436.8, 1545523.2, 1545609.6, 1545696.0, 1545782.4, 1545868.8, 1545955.2, 1546041.6, 1546128.0, 1546214.4, 1546300.8, 1546387.2, 1546473.6, 1546560.0, 1546646.4, 1546732.8, 1546819.2, 1546905.6, 1546992.0, 1547078.4, 1547164.8, 1547251.2, 1547337.6, 1547424.0, 1547510.4, 1547596.8, 1547683.2, 1547769.6, 1547856.0, 1547942.4, 1548028.8, 1548115.2, 1548201.6, 1548288.0, 1548374.4, 1548460.8, 1548547.2, 1548633.6, 1548720.0, 1548806.4, 1548892.8, 1548979.2, 1549065.6, 1549152.0, 1549238.4, 1549324.8, 1549411.2, 1549497.6, 1549584.0, 1549670.4, 1549756.8, 1549843.2, 1549929.6, 1550016.0, 1550102.4, 1550188.8, 1550275.2, 1550361.6, 1550448.0, 1550534.4, 1550620.8, 1550707.2, 1550793.6, 1550880.0, 1550966.4, 1551052.8, 1551139.2, 1551225.6, 1551312.0, 1551398.4, 1551484.8, 1551571.2, 1551657.6, 1551744.0, 1551830.4, 1551916.8, 1552003.2 ]



--chartsUrl : String
--chartsUrl =
--    "./chart_data.json"
--decoder : Decoder Chart
--decoder =
--    Decode.succeed Chart
--        |> required "types" typesDecoder
--typesDecoder : Decoder String
--typesDecoder =
--    Decode.succeed Chart
--        |> required "types" typesDecoder
--D.field "name" D.string
--init : List Line
--init =
--    [ { points =
--            [ ( -100, 0 )
--            , ( 100, 0 )
--            ]
--      , id = 1
--      , color = "green"
--      }
--    , { points =
--            [ ( 300, -50 )
--            , ( 1300, -50 )
--            ]
--      , id = 2
--      , color = "red"
--      }
--    , { points =
--            [ ( 100, -100 )
--            , ( 200, 100 )
--            ]
--      , id = 3
--      , color = "blue"
--      }
--    , { points =
--            [ ( 200, 0 )
--            , ( 300, 100 )
--            ]
--      , id = 4
--      , color = "pink"
--      }
--    ]
--        |> List.map Lines.init
